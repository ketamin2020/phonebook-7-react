{"version":3,"sources":["components-phonebook/list-transition.module.css","components-phonebook/phonebook-transition.module.css","components-phonebook/notification.module.css","redux/contactActions.js","redux/contactsReduser.js","redux/store.js","redux/contactOperation.js","redux/contactSelectors.js","components-phonebook/ContactCreator.js","components-phonebook/ContactList.js","components-phonebook/Section.js","components-phonebook/FilterContact.js","components-phonebook/Notification.js","components-phonebook/Spinner.js","components-phonebook/Phonebook.js","App.js","index.js"],"names":["module","exports","createTaskRequest","createAction","createTaskSuccses","createTaskErorr","fetchTaskRequest","fetchTaskSuccses","fetchTaskErorr","removeTaskRequest","removeTaskSuccses","removeTaskErorr","changeFilter","isNotification","contact","createReducer","contactActions","state","action","payload","filter","id","loading","combineReducers","store","configureStore","reducer","items","contactReducer","createTask","name","number","dispatch","contactAction","axios","post","then","resp","data","catch","error","fetchTask","get","removeTask","delete","getAllContact","getFilterValue","getFilterContact","createSelector","toLowerCase","includes","getNotificationValue","isLoading","ContactCreator","handleAddContact","target","value","setState","handleSubmit","e","props","preventDefault","some","setTimeout","onSubmit","this","className","type","required","onChange","Component","mapDispatchToProps","contactOperations","connect","contactSelectors","removeContact","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","listTransition","onClick","Section","title","children","in","appear","phonebook","mountOnEnter","onChangeFilter","Notification","Phonebook","notificationStyles","unmountOnExit","length","FilterContact","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64a0f93d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list-transition_enter__tnCkk\",\"enterActive\":\"list-transition_enterActive__2Fjo8\",\"exit\":\"list-transition_exit__15t5U\",\"exitActive\":\"list-transition_exitActive__1I2q5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"phonebook-transition_appear__8uz0L\",\"appearActive\":\"phonebook-transition_appearActive__3O6AR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"notification_enter__UIyZC\",\"enterActive\":\"notification_enterActive__2ltee\",\"exit\":\"notification_exit__8tGZv\",\"exitActive\":\"notification_exitActive__2wuLT\"};","// import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst createTaskRequest = createAction(\"contact/TaskRequest\");\nconst createTaskSuccses = createAction(\"contact/TaskSuccses\");\nconst createTaskErorr = createAction(\"contact/TaskError\");\n\nconst fetchTaskRequest = createAction(\"contact/fetchTaskRequest\");\nconst fetchTaskSuccses = createAction(\"contact/fetchTaskSuccses\");\nconst fetchTaskErorr = createAction(\"contact/fetchTaskError\");\n\nconst removeTaskRequest = createAction(\"contact/removeTaskRequest\");\nconst removeTaskSuccses = createAction(\"contact/removeTaskSuccses\");\nconst removeTaskErorr = createAction(\"contact/removeTaskError\");\n\nconst changeFilter = createAction(\"contact/filter\");\nconst isNotification = createAction(\"contact/notification\");\n\nexport default {\n  removeTaskRequest,\n  removeTaskSuccses,\n  removeTaskErorr,\n  createTaskRequest,\n  createTaskSuccses,\n  createTaskErorr,\n  fetchTaskRequest,\n  fetchTaskSuccses,\n  fetchTaskErorr,\n  changeFilter,\n  isNotification,\n};\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactActions from \"../redux/contactActions\";\n\nconst contact = createReducer([], {\n  [contactActions.fetchTaskSuccses]: (state, action) => action.payload,\n  [contactActions.createTaskSuccses]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [contactActions.removeTaskSuccses]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n});\n\nconst filter = createReducer(\"\", {\n  [contactActions.changeFilter]: (state, action) => action.payload,\n});\n\nconst isNotification = createReducer(false, {\n  [contactActions.isNotification]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [contactActions.createTaskRequest]: () => true,\n  [contactActions.createTaskSuccses]: () => false,\n  [contactActions.fetchTaskRequest]: () => true,\n  [contactActions.fetchTaskSuccses]: () => false,\n  [contactActions.removeTaskRequest]: () => true,\n  [contactActions.removeTaskSuccses]: () => false,\n});\n\nexport default combineReducers({\n  contact,\n  filter,\n  isNotification,\n  loading,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contactReducer from \"./contactsReduser\";\n\nconst store = configureStore({\n  reducer: {\n    items: contactReducer,\n  },\n});\n\nexport default store;\n","import contactAction from \"./contactActions\";\nimport axios from \"axios\";\n\nconst createTask = (name, number) => (dispatch) => {\n  dispatch(contactAction.createTaskRequest());\n  axios\n    .post(\"http://localhost:5000/contacts\", { name, number })\n    .then((resp) => {\n      dispatch(contactAction.createTaskSuccses(resp.data));\n    })\n    .catch((error) => dispatch(contactAction.createTaskErorr(error)));\n};\n\nconst fetchTask = () => (dispatch) => {\n  dispatch(contactAction.fetchTaskRequest());\n  axios\n    .get(\"http://localhost:5000/contacts\")\n    .then(({ data }) => dispatch(contactAction.fetchTaskSuccses(data)))\n    .catch((error) => contactAction.fetchTaskErorr(error));\n};\n\nconst removeTask = (id) => (dispatch) => {\n  dispatch(contactAction.removeTaskRequest());\n  axios\n    .delete(`http://localhost:5000/contacts/${id}`)\n    .then(() => dispatch(contactAction.removeTaskSuccses(id)))\n    .catch(() => dispatch(contactAction.removeTaskErorr()));\n};\n\nexport default {\n  createTask,\n  fetchTask,\n  removeTask,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getAllContact = (state) => state.items.contact;\nconst getFilterValue = (state) => state.items.filter;\nconst getNotificationValue = (state) => state.items.isNotification;\nconst isLoading = (state) => state.items.loading;\n\nconst getFilterContact = createSelector(\n  [getAllContact, getFilterValue],\n  (contact, filter) => {\n    return contact.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport default {\n  getAllContact,\n  getFilterContact,\n  getFilterValue,\n  getNotificationValue,\n  isLoading,\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../redux/contactActions\";\nimport contactOperations from \"../redux/contactOperation\";\nimport contactSelectors from \"../redux/contactSelectors\";\n\nclass ContactCreator extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleAddContact = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    const { name, number } = this.state;\n    const { createTask, items, isNotification } = this.props;\n    e.preventDefault();\n    const sameName = items.some((contact) => contact.name === name);\n    if (sameName) {\n      isNotification(true);\n      setTimeout(() => isNotification(false), 4000);\n    } else {\n      createTask(name, number);\n    }\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"group\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              required\n              value={this.state.name}\n              onChange={this.handleAddContact}\n            />\n            <span className=\"bar\"></span>\n            <label>Name</label>\n          </div>\n\n          <div className=\"group\">\n            <input\n              type=\"tel\"\n              name=\"number\"\n              required\n              value={this.state.number}\n              onChange={this.handleAddContact}\n            />\n            <span className=\"bar\"></span>\n            <label>Number </label>\n          </div>\n\n          <button className=\"glow-on-hover\" type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createTask: contactOperations.createTask,\n  isNotification: contactActions.isNotification,\n};\n\nconst mapStateToProps = (state) => ({\n  items: contactSelectors.getAllContact(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactCreator);\n","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactOperations from \"../redux/contactOperation\";\nimport contactSelectors from \"../redux/contactSelectors\";\nimport listTransition from \"../components-phonebook/list-transition.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ items, removeContact }) => (\n  <TransitionGroup component=\"ul\" className=\"items\">\n    {items.map(({ id, name, number }) => (\n      <CSSTransition key={id} timeout={400} classNames={listTransition}>\n        <li key={id} className=\"list\">\n          <div className=\"infoContact\">\n            <p>Name: {name}</p> <p>Tel. {number}</p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn cross\"\n            onClick={() => removeContact(id)}\n          ></button>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nconst mapStateToProps = (state) => ({\n  items: contactSelectors.getFilterContact(state),\n});\n\nconst mapDispatchToProps = {\n  removeContact: contactOperations.removeTask,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  items: PropTypes.array.isRequired,\n  removeContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport phonebook from \"./phonebook-transition.module.css\";\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <CSSTransition\n        in={true}\n        appear={true}\n        key={title}\n        timeout={1100}\n        classNames={phonebook}\n        mountOnEnter\n      >\n        <h2>{title}</h2>\n      </CSSTransition>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../redux/contactActions\";\nimport contactSelectors from \"../redux/contactSelectors\";\nimport PropTypes from \"prop-types\";\nfunction filterContact({ value, onChangeFilter }) {\n  return (\n    <div className=\"group\">\n      <input\n        type=\"text\"\n        value={value}\n        required\n        onChange={(e) => onChangeFilter(e.target.value)}\n      />\n      <span className=\"bar\"></span>\n      <label>Search Contact </label>\n    </div>\n  );\n}\nconst mapDispatchToProps = {\n  onChangeFilter: contactActions.changeFilter,\n};\n\nconst mapToStateToProps = (state) => ({\n  value: contactSelectors.getFilterValue(state),\n});\nexport default connect(mapToStateToProps, mapDispatchToProps)(filterContact);\n\nfilterContact.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nconst Notification = () => (\n  <div className=\"notifi\">\n    <p>Contact already exsist!</p>\n  </div>\n);\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nexport default class Spinner extends Component {\n  render() {\n    return (\n      <div className=\"Overlay\">\n        <div className=\"Modal\">\n          <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />;\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactOperations from \"../redux/contactOperation\";\nimport contactSelectors from \"../redux/contactSelectors\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactCreator from \"./ContactCreator\";\nimport ContactList from \"./ContactList\";\nimport Section from \"./Section\";\nimport FilterContact from \"./FilterContact\";\nimport Notification from \"./Notification\";\nimport Spinner from \"../components-phonebook/Spinner\";\nimport notificationStyles from \"./notification.module.css\";\n\nclass Phonebook extends Component {\n  componentDidMount() {\n    this.props.fetchTask();\n  }\n\n  render() {\n    const { items, loading, isNotification } = this.props;\n    return (\n      <>\n        {/* {loading && <Spinner />} */}\n\n        <CSSTransition\n          in={isNotification}\n          classNames={notificationStyles}\n          timeout={1000}\n          unmountOnExit\n        >\n          <Notification />\n        </CSSTransition>\n\n        <Section title=\"Phonebook\">\n          <ContactCreator />\n        </Section>\n        <Section title={items.length > 0 ? \"Contacts\" : \"Do not have contacts\"}>\n          {items.length > 0 && <FilterContact />}\n\n          <ContactList />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  items: contactSelectors.getAllContact(state),\n  isNotification: contactSelectors.getNotificationValue(state),\n  loading: contactSelectors.isLoading(state),\n});\n\nconst mapDispatchToProps = {\n  fetchTask: contactOperations.fetchTask,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Phonebook from \"./components-phonebook/Phonebook\";\nexport default function App() {\n  return (\n    <>\n      <Provider store={store}>\n        <Phonebook />\n      </Provider>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"../src/styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}